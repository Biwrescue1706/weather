const BASE_URL = "https://elvis-clone-draw-specialties.trycloudflare.com";
const API_URL = `${BASE_URL}/latest`;      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
const ASK_AI_URL = `${BASE_URL}/ask-ai`;   // ‡∏ñ‡∏≤‡∏° AI

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
async function fetchSensorData() {
  try {
    const response = await fetch(API_URL);
    const data = await response.json();

    const { light, temp, humidity } = data;

    document.getElementById("light").textContent = light;
    document.getElementById("temp").textContent = temp;
    document.getElementById("humidity").textContent = humidity;
    document.getElementById("light-status").textContent = getLightStatusText(light);
    document.getElementById("temp-status").textContent = getTempStatusText(temp);
    document.getElementById("humidity-status").textContent = getHumidityStatusText(humidity);

    const now = new Date();
    const thaiDate = getThaiDateParts(now);
    document.getElementById("datestamp").textContent = `${thaiDate.dayOfWeek}‡∏ó‡∏µ‡πà ${thaiDate.day} ${thaiDate.month} ‡∏û.‡∏®. ${thaiDate.year}`;
    document.getElementById("timestamp").textContent = `${thaiDate.time} ‡∏ô.`;
  } catch (error) {
    console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
  }
}

// ‡∏ñ‡∏≤‡∏° AI ‡∏ú‡πà‡∏≤‡∏ô backend
async function askAI() {
  const input = document.getElementById("user-question");
  const question = input.value.trim();
  const answerBox = document.getElementById("ai-answer");
  if (!question) {
    answerBox.textContent = "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö";
    return;
  }

  try {
    answerBox.innerHTML = `
    <p>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° : ${question} </p>
    <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≤‡∏° AI... </p>`;

    const response = await fetch(ASK_AI_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ question }),
    });

    const data = await response.json();
    const aiAnswer = data.answer ?? "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI";

    answerBox.innerHTML = `  
    <p>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° : ${question}</p>
    <p>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏Ç‡∏≠‡∏á AI : ${aiAnswer}</p>
    `;
    input.value = "";
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    answerBox.textContent = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI ‡πÑ‡∏î‡πâ";
  }
}

// ‡πÅ‡∏õ‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
function getLightStatusText(light) {
  if (light > 50000) return "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å";
  if (light > 10000) return "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å";
  if (light > 5000) return "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á";
  if (light > 1000) return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á";
  if (light > 500) return "‡πÅ‡∏™‡∏á‡∏û‡∏≠‡πÉ‡∏ä‡πâ";
  if (light > 100) return "‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢";
  if (light > 10) return "‡∏°‡∏∑‡∏î‡∏™‡∏•‡∏±‡∏ß";
  return "‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å";
}

function getTempStatusText(temp) {
  if (temp > 35) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å";
  if (temp >= 30) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô";
  if (temp >= 25) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏∏‡πà‡∏ô‡πÜ";
  if (temp >= 20) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏û‡∏≠‡∏î‡∏µ";
  return "‡∏≠‡∏∏‡∏ì‡∏´‡∏π‡∏°‡∏¥‡πÄ‡∏¢‡πá‡∏ô";
}

function getHumidityStatusText(humidity) {
  if (humidity > 85) return "‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏∂‡∏î‡∏≠‡∏±‡∏î";
  if (humidity > 70) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πâ‡∏ô ‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏ï‡∏±‡∏ß";
  if (humidity > 60) return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô";
  if (humidity > 40) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ö‡∏≤‡∏¢";
  if (humidity > 30) return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏´‡πâ‡∏á";
  if (humidity > 20) return "‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å";
  return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å üèúÔ∏è";
}

// ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
function getThaiDateParts(date) {
  const optionsDate = { weekday: "long", day: "numeric", month: "long", year: "numeric" };
  const optionsTime = { hour: "2-digit", minute: "2-digit", second: "2-digit", hour12: false };
  const thDateFormatter = new Intl.DateTimeFormat("th-TH", optionsDate);
  const thTimeFormatter = new Intl.DateTimeFormat("th-TH", optionsTime);
  const parts = thDateFormatter.formatToParts(date);
  const time = thTimeFormatter.format(date);
  return {
    dayOfWeek: parts.find((p) => p.type === "weekday")?.value ?? "",
    day: parts.find((p) => p.type === "day")?.value ?? "",
    month: parts.find((p) => p.type === "month")?.value ?? "",
    year: parts.find((p) => p.type === "year")?.value ?? "",
    time,
  };
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
window.addEventListener("load", () => {
  fetchSensorData();
  setInterval(fetchSensorData, 500); // ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
});
