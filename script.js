// ====== Config ======
const BASE_URL = "https://ce395backend-1.onrender.com";
const API_URL = `${BASE_URL}/latest`;
const ASK_AI_URL = `${BASE_URL}/ask-ai`;

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ (‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å DOM)
let currentSensor = null;
// ‡∏Å‡∏±‡∏ô‡∏¢‡∏¥‡∏á AI ‡∏ñ‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô (ms)
let lastAISummary = 0;

// ====== Utils (Thai date/time & status texts) ======
function getThaiDateParts(date) {
  const optionsDate = { weekday: "long", day: "numeric", month: "long", year: "numeric" };
  const optionsTime = { hour: "2-digit", minute: "2-digit", second: "2-digit", hour12: false };
  const thDate = new Intl.DateTimeFormat("th-TH", optionsDate).formatToParts(date);
  const thTime = new Intl.DateTimeFormat("th-TH", optionsTime).format(date);
  return {
    dayOfWeek: thDate.find(p => p.type === "weekday")?.value ?? "",
    day:thDate.find(p => p.type === "day")?.value ?? "",
    month:thDate.find(p => p.type === "month")?.value ?? "",
    year:thDate.find(p => p.type === "year")?.value ?? "",
    time: thTime,
  };
}

function getLightStatusText(light) {
  if (light > 50000) return "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å";
  if (light > 10000) return "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å";
  if (light > 5000)  return "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á";
  if (light > 1000)  return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á";
  if (light > 500)   return "‡πÅ‡∏™‡∏á‡∏û‡∏≠‡πÉ‡∏ä‡πâ";
  if (light > 100)   return "‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢";
  if (light > 10)    return "‡∏°‡∏∑‡∏î‡∏™‡∏•‡∏±‡∏ß";
  return "‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å";
}
function getTempStatusText(temp) {
  if (temp > 35) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å";
  if (temp >= 30) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô";
  if (temp >= 25) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏∏‡πà‡∏ô‡πÜ";
  if (temp >= 20) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏û‡∏≠‡∏î‡∏µ";
  return "‡∏≠‡∏∏‡∏ì‡∏´‡∏π‡∏°‡∏¥‡πÄ‡∏¢‡πá‡∏ô";
}
function getHumidityStatusText(h) {
  if (h > 85) return "‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏∂‡∏î‡∏≠‡∏±‡∏î";
  if (h > 70) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πâ‡∏ô ‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏ï‡∏±‡∏ß";
  if (h > 60) return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô";
  if (h > 40) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ö‡∏≤‡∏¢";
  if (h > 30) return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏´‡πâ‡∏á";
  if (h > 20) return "‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å";
  return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å üèúÔ∏è";
}

// ====== Sensor fetch ======
async function fetchSensorData() {
  try {
    const res = await fetch(API_URL);
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const { light, temp, humidity } = await res.json();

    // update cache
    currentSensor = { light, temp, humidity };

    // update UI
    document.getElementById("light").textContent = light;
    document.getElementById("temp").textContent = temp;
    document.getElementById("humidity").textContent = humidity;

    document.getElementById("light-status").textContent = getLightStatusText(light);
    document.getElementById("temp-status").textContent = getTempStatusText(temp);
    document.getElementById("humidity-status").textContent = getHumidityStatusText(humidity);

    const now = new Date();
    const th = getThaiDateParts(now);
    document.getElementById("datestamp").textContent = `${th.dayOfWeek}‡∏ó‡∏µ‡πà ${th.day} ${th.month} ‡∏û.‡∏®. ${th.year}`;
    document.getElementById("timestamp").textContent = `${th.time} ‡∏ô.`;

    return currentSensor;
  } catch (err) {
    console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    return null;
  }
}

// ====== AI summary (auto) ======
async function fetchAISummary(light, temp, humidity) {
  try {
    const now = Date.now();
    if (now - lastAISummary < 30_000) return; // ‡∏Å‡∏±‡∏ô‡∏¢‡∏¥‡∏á‡∏ñ‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏¥

    document.getElementById("ai-summary").textContent = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏ß‡∏¢ AI...";

    const res = await fetch(ASK_AI_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      // backend ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ä‡πâ lastSensorData ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏Ø ‡πÑ‡∏õ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
      body: JSON.stringify({ question: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", light, temp, humidity }),
    });

    const data = await res.json();

    if (!res.ok) {
      document.getElementById("ai-summary").textContent = data?.error || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ";
      return;
    }

    document.getElementById("ai-summary").textContent = data?.answer || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI";
    lastAISummary = now;
  } catch (e) {
    console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e);
    document.getElementById("ai-summary").textContent = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ";
  }
}
function fetchAISummaryOnInterval() {
  if (!currentSensor) return;
  const { light, temp, humidity } = currentSensor;
  fetchAISummary(light, temp, humidity);
}

// ====== Chat ask ======
function addMessage(text, sender) {
  const chat = document.getElementById("chat-messages");
  const wrap = document.createElement("div");
  wrap.className = `message ${sender === "‡∏Ñ‡∏∏‡∏ì" ? "user" : "ai"}`;

  const name = document.createElement("div");
  name.className = "sender";
  name.textContent = sender === "‡∏Ñ‡∏∏‡∏ì" ? "‡∏Ñ‡∏∏‡∏ì:" : "ü§ñAI:";

  const msg = document.createElement("div");
  msg.className = sender === "‡∏Ñ‡∏∏‡∏ì" ? "question" : "answer";
  msg.textContent = text;

  wrap.appendChild(name);
  wrap.appendChild(msg);
  chat.appendChild(wrap);
  chat.scrollTop = chat.scrollHeight;
}

async function askAI() {
  const input = document.getElementById("user-question");
  const question = input.value.trim();
  const chatBox = document.getElementById("chat-messages");
  if (!question) {
    addMessage("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "AI");
    return;
  }

  addMessage(question, "‡∏Ñ‡∏∏‡∏ì");
  input.value = "";

  // loading bubble
  const loading = document.createElement("div");
  loading.className = "message ai";
  loading.innerHTML = `<div class="sender">ü§ñAI:</div><div class="answer">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≤‡∏° AI...</div>`;
  chatBox.appendChild(loading);
  chatBox.scrollTop = chatBox.scrollHeight;

  try {
    const res = await fetch(ASK_AI_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ question }),
    });
    const data = await res.json();
    chatBox.removeChild(loading);
    addMessage(data?.answer ?? "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI", "AI");
  } catch (e) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", e);
    chatBox.removeChild(loading);
    addMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI ‡πÑ‡∏î‡πâ", "AI");
  }
}

// ====== Init ======
async function init() {
  // 1) ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÅ‡∏ö‡∏ö await ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á
  const first = await fetchSensorData();

  // 2) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏£‡∏∏‡∏õ AI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà NaN ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô)
  if (first) {
    fetchAISummary(first.light, first.temp, first.humidity);
  } else {
    document.getElementById("ai-summary").textContent = "‚åõ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå...";
  }

  // 3) ‡∏ï‡∏±‡πâ‡∏á interval
  setInterval(fetchSensorData, 1000);            // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥
  setInterval(fetchAISummaryOnInterval, 300000); // ‡∏™‡∏£‡∏∏‡∏õ AI ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ

  // 4) bind enter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≤‡∏° AI
  const input = document.getElementById("user-question");
  input?.addEventListener("keydown", (e) => {
    if (e.key === "Enter") askAI();
  });
}

window.addEventListener("load", init);
